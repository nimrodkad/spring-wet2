#!/bin/bash

function run_test {
    if (( $# != 4 )); then
        echo "Usage: ./run_test <number_of_lines> <test_id> <random_seed (0 to chose randomly)> <no failures mode (0/1)>"
        exit
    fi
    num_of_lines=$1
    test_name="randtest"$2
	random_seed=$3 
	no_failures=$4
    out_file=${test_name}.my.out
    if (( num_of_lines <= 0 )); then
        echo "<number_of_lines> must be positive"
        exit
    fi
    echo "generating a random test... ${test_name}.in ${test_name}.out"
    python2 generator.py $num_of_lines $test_name $random_seed 0 $no_failures  

    echo "compiling... g++ -g *.cpp -std=c++0x -DNDEBUG -Wall -o ${test_name}.exe"
    if g++ -g *.cpp -std=c++0x -DNDEBUG -Wall -o ${test_name}.exe; then 
		echo "compilation successfull!"
	else
		echo "compilation failed!"
		exit
	fi
    echo "running... ./${test_name}.exe < $test_name.in > $out_file"
    echo "running valgrind..."
    valgrind --log-file=${test_name}.valgrind.out --leak-check=full ./${test_name}.exe < $test_name.in > $out_file
    if (( `grep -c "0 bytes in 0 blocks" ${test_name}.valgrind.out` == 1 && `grep -c "0 errors from 0 contexts" ${test_name}.valgrind.out` == 1)); then
        echo "EXTENDED MEMORY CHECK PASSED"
        rm -f ${test_name}.valgrind.out
        memgood=1
    else
        echo "EXTENDED MEMORY CHECK FAILED"
        echo "Please view valgrind output in ${test_name}.valgrind.out"
        memgood=0
    fi
    log_name=${test_name}.log
    echo "diff result: wanted_output VS my_output" > $log_name
    diff ${test_name}.out $out_file >> $log_name
    diff_ret=$?
    if (( diff_ret == 0 )); then
        echo "TEST PASSED"
        rm $out_file $log_name
        testgood=1
    else
        echo "TEST FAILED"
        testgood=0
        python2 translate.py ${test_name}.in
        echo "the differences are stored in ${log_name} "
        echo "you can find C version of this test (for debugging) in ${test_name}.debug.cc"
    fi
    if (( $memgood == 1 && $testgood == 1)); then
        rm ${test_name}.in ${test_name}.out
    fi
    echo 
    echo 
    rm -f ${test_name}.exe
}

let test_num=0
lines_num=(100 200 500 1000 5000 10000)  # try to change those
for num_of_lines in ${lines_num[@]} ; do
    run_test "$num_of_lines" "$test_num" 0 0 
    let test_num++
done 

# try to change run_test parameters:

#	run_test "$num_of_lines" "$test_num" 12345 0   
#	to set random seed (you will get same result for each generation with same seed)
#	you can choose any number to be seed

#	run_test "$num_of_lines" "$test_num" 0 1
#	to create tests without FAILURE's (in this case actual length will be less than defined in lines_num)
